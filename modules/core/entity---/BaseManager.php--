<?
namespace Entity;

abstract class BaseManager{
    static protected $_table;
    static protected $_pk = "id";
    
    static protected $arInfo = array();
    
    static protected $arEvents = array(
        "ADD"       => "ENTITY.ADD",
        "UPDATE"    => "ENTITY.UPDATE",
        "DELETE"    => "ENTITY.DELETE",
    );
    
    static public function getClass(){
        return get_called_class();
    }
    
    static public function builder(){
        $obBuilder = new Builder(Connection::getInstance(), new static);

        return $obBuilder->from(static::getTableName());
    } 
    
    static public function getInfo(){
        return static::$arInfo;
    }
    
    static public function setInfo(array $arInfo){
        static::$arInfo = $arInfo;
    }   
    
    static public function getTableName(){
        return static::$_table;
    }
    
    static public function setTableName($tableName){
        static::$_table = $tableName;
    }
    
    static public function getEventNames(){
        return static::$arEvents;
    }
    
    static public function setEventNames(array $arEvents){
        static::$arEvents = $arEvents;
    }
    
    static public function getPk(){
        return static::$_pk;
    }
    
    static public function setPk($pk){
        static::$_pk = $pk;
    }
    
    static public function getByID($id){
        return static::builder()->where(static::getPk(), $id)->fetch();
    }
    
    static public function getAllByID($arIDs){
        return static::builder()->whereIn(static::getPk(), $arIDs)->fetchAll();
    }
    
    static public function add(array $arData){
        return static::builder()->add($arData);
    }
    
    static public function update($id, array $arData){
        $obResult = static::builder()->where(static::getPk(), $id)->update($arData);
        
        if($obResult->isSuccess()){
            if(($arIDs = $obResult->getID()) && is_array($arIDs)){
                $obResult->setID(reset($arIDs));
            }
        }else{
            if(($arErrors = $obResult->getErrors()) && is_array($arErrors)){
                $obResult->setErrors(reset($arErrors));
            }
        }
        
        return $obResult;
    }
    
    static public function updateAll($arIDs, array $arData){
        return static::builder()->whereIn(static::getPk(), $arIDs)->update($arData);
    }
    
    static public function delete($id){
        $obResult = static::builder()->where(static::getPk(), $id)->delete();
        
        if($obResult->isSuccess() && ($arIDs = $obResult->getID()) && is_array($arIDs)){
            $obResult->setID(reset($arIDs));
        }
        
        return $obResult;
    }
    
    static public function deleteAll($arIDs){
        return static::builder()->whereIn(static::getPk(), $arIDs)->delete();
    }
}
?>